version: "2"
linters:
  enable:
    - asciicheck
    - bidichk
    - bodyclose
    - copyloopvar
    - cyclop
    - dogsled
    - dupl
    - errcheck
    - err113
    - funlen
    - gochecknoglobals
    - gochecknoinits
    - gocognit
    - goconst
    - gocritic
    - gocyclo
    - godox
    - gosec
    - govet
    - ineffassign
    - lll
    - misspell
    - nilerr
    - nakedret
    - prealloc
    - revive
    - staticcheck
    - unconvert
    - unparam
    - unused
    - whitespace
    - wsl
  settings:
    gocyclo:
      min-complexity: 10
    gocognit:
      min-complexity: 10
    dupl:
      threshold: 100
    goconst:
      min-len: 2
      min-occurrences: 3
    lll:
      line-length: 140
    gocritic:
      enabled-tags:
        - diagnostic
        - experimental
        - opinionated
        - performance
        - style
      disabled-checks:
        - wrapperFunc
        - dupImport
        - ifElseChain
        - octalLiteral
    funlen:
      lines: 100
      statements: 65
  exclusions:
    warn-unused: false
    rules:
      # Exclude some linters from running on tests files.
      - path: _test\.go
        linters:
          - gocyclo
          - errcheck
          - dupl
          - gosec
      # Run some linter only for test files by excluding its issues for everything else.
      - path-except: _test\.go
        linters:
          - forbidigo
      # Exclude `lll` issues for long lines with `go:generate`.
      - linters:
          - lll
        source: "^//go:generate "
    paths-except:
      - configs/

formatters:
  enable:
    - gci
    - gofmt
    - goimports

issues:
  max-issues-per-linter: 50
  max-same-issues: 3
  new: false
  fix: true
  uniq-by-line: true
  whole-files: true

output:
  formats:
    tab:
      print-linter-name: true
      colors: true
    # code-climate:
    #   path: stdout
  show-stats: true

run:
  timeout: 5m
  allow-parallel-runners: true
  concurrency: 4
  go: "1.24"
